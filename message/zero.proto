syntax = "proto2";
option go_package = "zero";

package Zero;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;

enum DeviceType {
    VM = 1;
    THIRD_PARTY = 3;
    VGATEWAY = 5;
    HOST = 6;
    NETWORK = 7;
    FLOATING_IP = 8;
    DHCP = 9;
}

enum Direction {
    CLIENT_TO_SERVER = 1;
    SERVER_TO_CLIENT = 2;
}

enum AclDirection {
    FORWARD = 1;
    BACKWARD = 2;
}

message Tag {
    optional string id = 1;
    optional uint64 code = 2;

    optional uint32 ip = 4;
    optional uint64 mac = 5;
    optional int32 group_id = 6;
    optional int32 l2_epc_id = 7;
    optional int32 l3_epc_id = 8;
    optional uint32 l2_device_id = 9;
    optional DeviceType l2_device_type = 10;
    optional uint32 l3_device_id = 11;
    optional DeviceType l3_device_type = 12;
    optional uint32 host_id = 13;
    optional uint32 is_ipv6 = 14;
    optional string ip6 = 15;

    optional uint32 ip_0 = 16;
    optional uint32 ip_1 = 17;
    optional uint64 mac_0 = 18;
    optional uint64 mac_1 = 19;
    optional int32 group_id_0 = 20;
    optional int32 group_id_1 = 21;
    optional int32 l2_epc_id_0 = 22;
    optional int32 l2_epc_id_1 = 23;
    optional int32 l3_epc_id_0 = 24;
    optional int32 l3_epc_id_1 = 25;
    optional uint32 l2_device_id_0 = 26;
    optional DeviceType l2_device_type_0 = 27;
    optional uint32 l2_device_id_1 = 28;
    optional DeviceType l2_device_type_1 = 29;
    optional uint32 l3_device_id_0 = 30;
    optional DeviceType l3_device_type_0 = 31;
    optional uint32 l3_device_id_1 = 32;
    optional DeviceType l3_device_type_1 = 33;
    optional uint32 host_id_0 = 34;
    optional uint32 host_id_1 = 35;
    optional string ip6_0 = 36;
    optional string ip6_1 = 37;

    optional Direction direction = 40;
    optional uint32 acl_gid = 41;
    optional uint32 vlan_id = 43;
    optional uint32 protocol = 44;
    optional uint32 server_port = 45;
    optional AclDirection acl_direction = 46;
    optional uint32 vtap = 47;
    optional uint32 tap_type = 48;
    optional uint32 subnet_id = 49;
    optional uint32 acl_id = 50;
    optional uint32 pod_node_id = 52;
    optional uint32 side = 53;

    optional string country = 60;
    optional string region = 61;
    optional string isp = 62;
}

message UsageStats {
    optional uint64 packet_tx = 1;
    optional uint64 packet_rx = 2;
    optional uint64 packet = 3;
    optional uint64 bit_tx = 4;
    optional uint64 bit_rx = 5;
    optional uint64 bit = 6;
}

message UsageMeter {
    optional UsageStats sum = 1;
    optional UsageStats max = 2;
}

message PerfStats {
    optional uint64 flow_count = 1;
    optional uint64 new_flow_count = 2;
    optional uint64 closed_flow_count = 3;
    optional uint64 retrans_flow_count = 4;
    optional uint64 half_open_flow_count = 5;
    optional uint64 packet_tx = 6;
    optional uint64 packet_rx = 7;
    optional uint64 retrans_cnt_tx = 8;
    optional uint64 retrans_cnt_rx = 9;

    optional uint64 rtt_syn = 11;
    optional uint64 rtt_syn_flow = 12;
    optional uint64 rtt_avg = 13;
    optional uint64 rtt_avg_flow = 14;
    optional uint64 art_avg = 15;
    optional uint64 art_avg_flow = 16;

    optional uint64 zero_wnd_cnt_tx = 21;
    optional uint64 zero_wnd_cnt_rx = 22;
}

message RttStats {
    optional uint64 rtt_syn = 1;
    optional uint64 rtt_avg = 2;
    optional uint64 art_avg = 3;
}

message PerfMeter {
    optional PerfStats sum = 1;
    optional RttStats max = 2;
    optional RttStats min = 3;
}

message GeoMeter {
    optional uint64 sum_closed_flow_count = 1;
    optional uint64 sum_abnormal_flow_count = 2;
    optional uint64 sum_closed_flow_duration_us = 3;
    optional uint64 sum_packet_tx = 5;
    optional uint64 sum_packet_rx = 6;
    optional uint64 sum_bit_tx = 7;
    optional uint64 sum_bit_rx = 8;

    optional uint64 sum_rtt_syn_client = 11;
    optional uint64 sum_rtt_syn_client_flow = 12;
}

message FpsMeter {
    optional uint64 sum_flow_count = 1;
    optional uint64 sum_new_flow_count = 2;
    optional uint64 sum_closed_flow_count = 3;

    optional uint64 max_flow_count = 11;
    optional uint64 max_new_flow_count = 12;
}

message FlowMeter {
    optional uint64 sum_flow_count = 1;
    optional uint64 sum_new_flow_count = 2;
    optional uint64 sum_closed_flow_count = 3;
    optional uint64 sum_packet_tx = 4;
    optional uint64 sum_packet_rx = 5;
    optional uint64 sum_packet = 6;
    optional uint64 sum_bit_tx = 7;
    optional uint64 sum_bit_rx = 8;
    optional uint64 sum_bit = 9;
}

message ConsoleLogMeter {
    optional uint64 sum_packet_tx = 1;
    optional uint64 sum_packet_rx = 2;
    optional uint64 sum_closed_flow_count = 3;
    optional uint64 sum_closed_flow_duration_us = 4;
}

message TypeMeter {
    optional uint64 sum_count_l_0s1s = 11;
    optional uint64 sum_count_l_1s5s = 12;
    optional uint64 sum_count_l_5s10s = 13;
    optional uint64 sum_count_l_10s1m = 14;
    optional uint64 sum_count_l_1m1h = 15;
    optional uint64 sum_count_l_1h = 16;

    optional uint64 sum_count_e_0k10k = 21;
    optional uint64 sum_count_e_10k100k = 22;
    optional uint64 sum_count_e_100k1m = 23;
    optional uint64 sum_count_e_1m100m = 24;
    optional uint64 sum_count_e_100m1g = 25;
    optional uint64 sum_count_e_1g = 26;

    optional uint64 sum_count_t_c_rst = 31;
    optional uint64 sum_count_t_c_half_open = 32;
    optional uint64 sum_count_t_c_half_close = 33;
    optional uint64 sum_count_t_s_rst = 34;
    optional uint64 sum_count_t_s_half_open = 35;
    optional uint64 sum_count_t_s_half_close = 36;
}

message VTAPUsageMeter {
    optional uint64 tx_bytes = 1;
    optional uint64 rx_bytes = 2;
    optional uint64 bytes = 3;
    optional uint64 tx_packets = 4;
    optional uint64 rx_packets = 5;
    optional uint64 packets = 6;
}

message Meter {
    optional UsageMeter usage = 1;
    optional PerfMeter perf = 2;
    optional GeoMeter geo = 3;
    optional FlowMeter flow = 4;
    optional ConsoleLogMeter console_log = 6;
    optional TypeMeter type = 8;
    optional FpsMeter fps = 9;
    optional VTAPUsageMeter vtap_usage = 10;
}

message ZeroHeader {
    required fixed32 timestamp = 1;
    required fixed32 sequence = 2;
    required fixed32 hash = 3;
}

message ZeroDocument {
    optional uint32 timestamp = 1;
    optional Tag tag = 2;
    optional Meter meter = 3;
    optional uint32 action_flags = 4;
}
