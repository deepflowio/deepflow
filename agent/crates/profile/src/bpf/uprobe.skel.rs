// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("uprobe_bpf")
            .map("malloc_info", false)
            .map("memperf_output", false)
            .map(".rodata.str1.1", false)
            .prog("alloc_in_new_tlab");

        builder.build()
    }

    #[derive(Default)]
    pub struct UprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for UprobeSkelBuilder {
        type Output = OpenUprobeSkel<'a>;
        fn open(self) -> libbpf_rs::Result<OpenUprobeSkel<'a>> {
            let opts = *self.obj_builder.opts();
            self.open_opts(opts)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenUprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            #[allow(unused_mut)]
            let mut skel = OpenUprobeSkel {
                obj,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenUprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenUprobeMapsMut<'_> {
        pub fn malloc_info(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("malloc_info").unwrap()
        }

        pub fn memperf_output(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("memperf_output").unwrap()
        }

        pub fn rodata_str1_1(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut(".rodata.str1.1").unwrap()
        }
    }

    pub struct OpenUprobeMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenUprobeMaps<'_> {
        pub fn malloc_info(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("malloc_info").unwrap()
        }

        pub fn memperf_output(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("memperf_output").unwrap()
        }

        pub fn rodata_str1_1(&self) -> &libbpf_rs::OpenMap {
            self.inner.map(".rodata.str1.1").unwrap()
        }
    }

    pub struct OpenUprobeProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenUprobeProgs<'_> {
        pub fn alloc_in_new_tlab(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("alloc_in_new_tlab").unwrap()
        }
    }

    pub struct OpenUprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenUprobeProgsMut<'_> {
        pub fn alloc_in_new_tlab(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("alloc_in_new_tlab").unwrap()
        }
    }

    pub mod uprobe_types {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Debug, Clone)]
        #[repr(C)]
        pub struct struct_ops {}

        impl struct_ops {}
    }

    pub struct OpenUprobeSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        pub struct_ops: uprobe_types::struct_ops,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenUprobeSkel<'a> {
        type Output = UprobeSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<UprobeSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(UprobeSkel {
                obj,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: UprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenUprobeSkel<'_> {
        pub fn progs_mut(&mut self) -> OpenUprobeProgsMut<'_> {
            OpenUprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn progs(&self) -> OpenUprobeProgs<'_> {
            OpenUprobeProgs { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenUprobeMapsMut<'_> {
            OpenUprobeMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenUprobeMaps<'_> {
            OpenUprobeMaps { inner: &self.obj }
        }
    }

    pub struct UprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl UprobeMapsMut<'_> {
        pub fn malloc_info(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("malloc_info").unwrap()
        }

        pub fn memperf_output(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("memperf_output").unwrap()
        }

        pub fn rodata_str1_1(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut(".rodata.str1.1").unwrap()
        }
    }

    pub struct UprobeMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl UprobeMaps<'_> {
        pub fn malloc_info(&self) -> &libbpf_rs::Map {
            self.inner.map("malloc_info").unwrap()
        }

        pub fn memperf_output(&self) -> &libbpf_rs::Map {
            self.inner.map("memperf_output").unwrap()
        }

        pub fn rodata_str1_1(&self) -> &libbpf_rs::Map {
            self.inner.map(".rodata.str1.1").unwrap()
        }
    }

    pub struct UprobeProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl UprobeProgs<'_> {
        pub fn alloc_in_new_tlab(&self) -> &libbpf_rs::Program {
            self.inner.prog("alloc_in_new_tlab").unwrap()
        }
    }

    pub struct UprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl UprobeProgsMut<'_> {
        pub fn alloc_in_new_tlab(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("alloc_in_new_tlab").unwrap()
        }
    }

    #[derive(Default)]
    pub struct UprobeLinks {
        pub alloc_in_new_tlab: Option<libbpf_rs::Link>,
    }

    pub struct UprobeSkel<'a> {
        pub obj: libbpf_rs::Object,
        struct_ops: uprobe_types::struct_ops,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: UprobeLinks,
    }

    unsafe impl Send for UprobeSkel<'_> {}
    unsafe impl Sync for UprobeSkel<'_> {}

    impl Skel for UprobeSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = UprobeLinks {
                alloc_in_new_tlab: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl UprobeSkel<'_> {
        pub fn progs_mut(&mut self) -> UprobeProgsMut<'_> {
            UprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn progs(&self) -> UprobeProgs<'_> {
            UprobeProgs { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> UprobeMapsMut<'_> {
            UprobeMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> UprobeMaps<'_> {
            UprobeMaps { inner: &self.obj }
        }

        pub fn struct_ops_raw(&self) -> *const uprobe_types::struct_ops {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &uprobe_types::struct_ops {
            &self.struct_ops
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 117, 112, 114, 111, 98, 101, 47, 47, 117, 115, 114, 47, 108, 105, 98, 47, 106, 118, 109,
        47, 106, 97, 118, 97, 45, 49, 46, 56, 46, 48, 45, 111, 112, 101, 110, 106, 100, 107, 45,
        49, 46, 56, 46, 48, 46, 52, 48, 50, 46, 98, 48, 54, 45, 49, 46, 101, 108, 55, 95, 57, 46,
        120, 56, 54, 95, 54, 52, 47, 106, 114, 101, 47, 108, 105, 98, 47, 97, 109, 100, 54, 52, 47,
        115, 101, 114, 118, 101, 114, 47, 108, 105, 98, 106, 118, 109, 46, 115, 111, 58, 95, 90,
        78, 49, 49, 65, 108, 108, 111, 99, 84, 114, 97, 99, 101, 114, 51, 51, 115, 101, 110, 100,
        95, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 95, 105, 110, 95, 110, 101, 119, 95,
        116, 108, 97, 98, 95, 101, 118, 101, 110, 116, 69, 49, 49, 75, 108, 97, 115, 115, 72, 97,
        110, 100, 108, 101, 80, 56, 72, 101, 97, 112, 87, 111, 114, 100, 109, 109, 80, 54, 84, 104,
        114, 101, 97, 100, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 46,
        114, 111, 100, 97, 116, 97, 46, 115, 116, 114, 49, 46, 49, 0, 117, 112, 114, 111, 98, 101,
        46, 98, 112, 102, 46, 99, 0, 76, 73, 67, 69, 78, 83, 69, 0, 97, 108, 108, 111, 99, 95, 105,
        110, 95, 110, 101, 119, 95, 116, 108, 97, 98, 0, 109, 97, 108, 108, 111, 99, 95, 105, 110,
        102, 111, 0, 109, 101, 109, 112, 101, 114, 102, 95, 111, 117, 116, 112, 117, 116, 0, 46,
        66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 244, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 252, 0,
        0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 17, 0, 5,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 26, 1, 0, 0, 17, 0, 5, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 121, 22, 88, 0, 0, 0, 0, 0, 121, 23, 96, 0, 0, 0, 0,
        0, 133, 0, 0, 0, 14, 0, 0, 0, 183, 1, 0, 0, 10, 0, 0, 0, 107, 26, 248, 255, 0, 0, 0, 0, 24,
        1, 0, 0, 115, 105, 122, 101, 0, 0, 0, 0, 61, 37, 108, 117, 123, 26, 240, 255, 0, 0, 0, 0,
        24, 1, 0, 0, 101, 61, 37, 108, 0, 0, 0, 0, 117, 32, 97, 95, 123, 26, 232, 255, 0, 0, 0, 0,
        24, 1, 0, 0, 97, 98, 32, 116, 0, 0, 0, 0, 95, 115, 105, 122, 123, 26, 224, 255, 0, 0, 0, 0,
        24, 1, 0, 0, 110, 95, 110, 101, 0, 0, 0, 0, 119, 95, 116, 108, 123, 26, 216, 255, 0, 0, 0,
        0, 24, 1, 0, 0, 32, 97, 108, 108, 0, 0, 0, 0, 111, 99, 95, 105, 123, 26, 208, 255, 0, 0, 0,
        0, 24, 1, 0, 0, 112, 105, 100, 58, 0, 0, 0, 0, 32, 37, 108, 117, 123, 26, 200, 255, 0, 0,
        0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 200, 255, 255,
        255, 183, 2, 0, 0, 50, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0, 0, 191, 116, 0, 0, 0, 0, 0, 0, 191,
        101, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
        0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 105, 100, 58, 32, 37, 108, 117, 32, 97, 108, 108,
        111, 99, 95, 105, 110, 95, 110, 101, 119, 95, 116, 108, 97, 98, 32, 116, 95, 115, 105, 122,
        101, 61, 37, 108, 117, 32, 97, 95, 115, 105, 122, 101, 61, 37, 108, 117, 10, 0, 0, 0, 0, 0,
        0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 160, 3, 0, 0, 91, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
        0, 2, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0,
        0, 0, 8, 9, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 8, 0,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 8, 13, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 0, 4, 24, 0, 0, 0, 72, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
        16, 0, 0, 0, 64, 0, 0, 0, 85, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 8, 17, 0, 0, 0, 102,
        0, 0, 0, 0, 0, 0, 8, 18, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 8, 19, 0, 0, 0, 135, 0, 0, 0, 0,
        0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 153, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 170, 0, 0, 0, 7, 0, 0, 0, 128, 0,
        0, 0, 174, 0, 0, 0, 11, 0, 0, 0, 192, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 14, 20, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 153, 0,
        0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 24, 0, 0, 0, 64, 0, 0, 0, 192, 0, 0, 0, 0, 0,
        0, 14, 26, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 29, 0, 0, 0, 207, 0, 0, 0, 21, 0,
        0, 4, 168, 0, 0, 0, 215, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 19, 0, 0, 0, 64,
        0, 0, 0, 223, 0, 0, 0, 19, 0, 0, 0, 128, 0, 0, 0, 227, 0, 0, 0, 19, 0, 0, 0, 192, 0, 0, 0,
        231, 0, 0, 0, 19, 0, 0, 0, 0, 1, 0, 0, 234, 0, 0, 0, 19, 0, 0, 0, 64, 1, 0, 0, 237, 0, 0,
        0, 19, 0, 0, 0, 128, 1, 0, 0, 241, 0, 0, 0, 19, 0, 0, 0, 192, 1, 0, 0, 245, 0, 0, 0, 19, 0,
        0, 0, 0, 2, 0, 0, 248, 0, 0, 0, 19, 0, 0, 0, 64, 2, 0, 0, 251, 0, 0, 0, 19, 0, 0, 0, 128,
        2, 0, 0, 254, 0, 0, 0, 19, 0, 0, 0, 192, 2, 0, 0, 1, 1, 0, 0, 19, 0, 0, 0, 0, 3, 0, 0, 4,
        1, 0, 0, 19, 0, 0, 0, 64, 3, 0, 0, 7, 1, 0, 0, 19, 0, 0, 0, 128, 3, 0, 0, 10, 1, 0, 0, 19,
        0, 0, 0, 192, 3, 0, 0, 18, 1, 0, 0, 19, 0, 0, 0, 0, 4, 0, 0, 21, 1, 0, 0, 19, 0, 0, 0, 64,
        4, 0, 0, 24, 1, 0, 0, 19, 0, 0, 0, 128, 4, 0, 0, 30, 1, 0, 0, 19, 0, 0, 0, 192, 4, 0, 0,
        33, 1, 0, 0, 19, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 36, 1, 0, 0, 28,
        0, 0, 0, 40, 1, 0, 0, 1, 0, 0, 12, 30, 0, 0, 0, 58, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 63, 1, 0,
        0, 0, 0, 0, 14, 33, 0, 0, 0, 1, 0, 0, 0, 148, 2, 0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 34, 0, 0,
        0, 0, 0, 0, 0, 13, 0, 0, 0, 156, 2, 0, 0, 2, 0, 0, 15, 48, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0,
        0, 32, 0, 0, 0, 27, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82,
        82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 117, 54, 52, 0, 95, 95, 117,
        54, 52, 0, 108, 111, 110, 103, 32, 108, 111, 110, 103, 32, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 105, 110, 116, 0, 109, 97, 108, 108, 111, 99, 95, 100, 97, 116, 97, 95, 116,
        0, 97, 100, 100, 114, 101, 115, 115, 0, 115, 105, 122, 101, 0, 99, 97, 108, 108, 95, 116,
        105, 109, 101, 0, 115, 105, 122, 101, 95, 116, 0, 95, 95, 107, 101, 114, 110, 101, 108, 95,
        115, 105, 122, 101, 95, 116, 0, 95, 95, 107, 101, 114, 110, 101, 108, 95, 117, 108, 111,
        110, 103, 95, 116, 0, 108, 111, 110, 103, 32, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        105, 110, 116, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101,
        115, 0, 107, 101, 121, 0, 118, 97, 108, 117, 101, 0, 109, 97, 108, 108, 111, 99, 95, 105,
        110, 102, 111, 0, 109, 101, 109, 112, 101, 114, 102, 95, 111, 117, 116, 112, 117, 116, 0,
        112, 116, 95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114,
        49, 50, 0, 98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0,
        97, 120, 0, 99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97,
        120, 0, 105, 112, 0, 99, 115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 99,
        116, 120, 0, 97, 108, 108, 111, 99, 95, 105, 110, 95, 110, 101, 119, 95, 116, 108, 97, 98,
        0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47, 104, 111, 109, 101, 47, 106,
        105, 110, 106, 105, 101, 47, 112, 114, 111, 106, 101, 99, 116, 115, 47, 100, 101, 101, 112,
        102, 108, 111, 119, 121, 115, 47, 100, 101, 101, 112, 102, 108, 111, 119, 47, 97, 103, 101,
        110, 116, 47, 99, 114, 97, 116, 101, 115, 47, 112, 114, 111, 102, 105, 108, 101, 47, 115,
        114, 99, 47, 98, 112, 102, 47, 117, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46, 99, 0,
        105, 110, 116, 32, 66, 80, 70, 95, 75, 80, 82, 79, 66, 69, 40, 97, 108, 108, 111, 99, 95,
        105, 110, 95, 110, 101, 119, 95, 116, 108, 97, 98, 44, 32, 118, 111, 105, 100, 32, 42, 107,
        108, 97, 115, 115, 44, 32, 118, 111, 105, 100, 32, 42, 111, 98, 106, 44, 32, 115, 105, 122,
        101, 95, 116, 32, 116, 108, 97, 98, 95, 115, 105, 122, 101, 44, 32, 115, 105, 122, 101, 95,
        116, 32, 97, 108, 108, 111, 99, 95, 115, 105, 122, 101, 41, 0, 32, 32, 32, 32, 117, 54, 52,
        32, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110,
        116, 95, 112, 105, 100, 95, 116, 103, 105, 100, 40, 41, 59, 0, 32, 32, 32, 32, 98, 112,
        102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 112, 105, 100, 58, 32, 37, 108, 117, 32, 97,
        108, 108, 111, 99, 95, 105, 110, 95, 110, 101, 119, 95, 116, 108, 97, 98, 32, 116, 95, 115,
        105, 122, 101, 61, 37, 108, 117, 32, 97, 95, 115, 105, 122, 101, 61, 37, 108, 117, 92, 110,
        34, 44, 32, 105, 100, 32, 62, 62, 32, 51, 50, 44, 32, 116, 108, 97, 98, 95, 115, 105, 122,
        101, 44, 32, 97, 108, 108, 111, 99, 95, 115, 105, 122, 101, 41, 59, 0, 48, 58, 49, 49, 0,
        48, 58, 49, 50, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 117, 112,
        114, 111, 98, 101, 47, 47, 117, 115, 114, 47, 108, 105, 98, 47, 106, 118, 109, 47, 106, 97,
        118, 97, 45, 49, 46, 56, 46, 48, 45, 111, 112, 101, 110, 106, 100, 107, 45, 49, 46, 56, 46,
        48, 46, 52, 48, 50, 46, 98, 48, 54, 45, 49, 46, 101, 108, 55, 95, 57, 46, 120, 56, 54, 95,
        54, 52, 47, 106, 114, 101, 47, 108, 105, 98, 47, 97, 109, 100, 54, 52, 47, 115, 101, 114,
        118, 101, 114, 47, 108, 105, 98, 106, 118, 109, 46, 115, 111, 58, 95, 90, 78, 49, 49, 65,
        108, 108, 111, 99, 84, 114, 97, 99, 101, 114, 51, 51, 115, 101, 110, 100, 95, 97, 108, 108,
        111, 99, 97, 116, 105, 111, 110, 95, 105, 110, 95, 110, 101, 119, 95, 116, 108, 97, 98, 95,
        101, 118, 101, 110, 116, 69, 49, 49, 75, 108, 97, 115, 115, 72, 97, 110, 100, 108, 101, 80,
        56, 72, 101, 97, 112, 87, 111, 114, 100, 109, 109, 80, 54, 84, 104, 114, 101, 97, 100, 0,
        0, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 108, 0,
        0, 0, 128, 0, 0, 0, 44, 0, 0, 0, 8, 0, 0, 0, 162, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 31, 0,
        0, 0, 16, 0, 0, 0, 162, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 71, 1, 0, 0, 155, 1, 0, 0, 5, 136,
        0, 0, 16, 0, 0, 0, 71, 1, 0, 0, 250, 1, 0, 0, 14, 144, 0, 0, 32, 0, 0, 0, 71, 1, 0, 0, 35,
        2, 0, 0, 5, 148, 0, 0, 200, 0, 0, 0, 71, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 71,
        1, 0, 0, 35, 2, 0, 0, 5, 148, 0, 0, 248, 0, 0, 0, 71, 1, 0, 0, 155, 1, 0, 0, 5, 136, 0, 0,
        16, 0, 0, 0, 162, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 138, 2, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 29, 0, 0, 0, 143, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 55, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 0, 0,
        0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
        0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32,
        2, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 40, 3, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 56, 3, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 3, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 1, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 0, 0, 0, 0, 19, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 1,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 10, 0, 0, 0, 0, 0,
        0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ];
}
