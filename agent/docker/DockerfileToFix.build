# 编译阶段
# dfcloud-image-registry.cn-beijing.cr.aliyuncs.com/deepflowcloud/rust-build:latest
# 使用 Centos 为基础镜像，安装所需依赖
#FIXME: 暂时锁定x86_64架构，以后支持优化构建速度
FROM centos:centos7.9.2009

# 2. 配置rust环境变量
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH
# 安装自定义软件
RUN yum install make epel-release centos-release-scl -y && yum -y install jq

# 安装基础依赖#
RUN  yum install curl devtoolset-8-gcc devtoolset-8-gdb devtoolset-8-gcc-c++ devtoolset-8-binutils openssl-devel libpcap-devel perl-Digest-MD5 elfutils-libelf-devel-static glibc-static zlib-static git -y && \
     echo "source /opt/rh/devtoolset-8/enable" >> /etc/profile && \
     curl  https://sh.rustup.rs -so restup.sh; bash restup.sh -y
RUN  curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/protoc --silent -O && chmod a+x protoc && mv protoc /usr/bin/ && whereis protoc && protoc --version

RUN  curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/llvm-clang-11.0.0-2.el7.x86_64.rpm --silent -O && \
     yum --disablerepo=* localinstall -y ./llvm-clang-*.rpm && rm -rf llvm-clang-*.rpm && \
     curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/libdwarf-0.4.1-1.el7.x86_64.rpm --silent -O && \
     yum --disablerepo=* localinstall -y ./libdwarf-*.rpm && rm -rf libdwarf-*.rpm && \
     curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/bddisasm-1.34.10-1.el7.x86_64.rpm --silent -O && \
     yum --disablerepo=* localinstall -y ./bddisasm-*.rpm && rm -rf bddisasm-*.rpm && \
     curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/bcc-bpf-0.25.0-2.el7.x86_64.rpm --silent -O && \
     yum --disablerepo=* localinstall -y ./bcc-bpf-*.rpm && rm -rf bcc-bpf-*.rpm && \
     curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/libGoReSym-0.0.1-2.el7.x86_64.rpm --silent -O && \
     yum --disablerepo=* localinstall -y ./libGoReSym-*.rpm && rm -rf libGoReSym-*.rpm && \
     yum clean all




# 静态编译

RUN yum -y install https://forensics.cert.org/cert-forensics-tools-release-el7.rpm  && \
    yum -y install musl-libc musl-libc-static musl-clang musl-gcc  && \
    cd /usr/x86_64-linux-musl/lib64  && \
    curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/musl/libbcc_bpf.a --silent -O && \
    curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/musl/libpcap.a --silent -O && \
    curl https://deepflow-ce.oss-cn-beijing.aliyuncs.com/pkg/compile/x86_64/musl/libz.a --silent -O && \
    cd /usr/x86_64-linux-musl/include  && \
    ln -s /usr/include/bcc bcc && \
    ln -s /usr/include/asm asm  && \
    ln -s /usr/include/asm-generic asm-generic  && \
    ln -s /usr/include/bddisasm bddisasm  && \
    ln -s /usr/include/gelf.h gelf.h  && \
    ln -s /usr/include/libdwarf-0 libdwarf-0  && \
    ln -s /usr/include/libelf.h libelf.h  && \
    ln -s /usr/include/libGoReSym.h libGoReSym.h  && \
    ln -s /usr/include/linux linux  && \
    ln -s /usr/include/sys/queue.h sys/queue.h && \
    ln -s /usr/include/zlib.h zlib.h

RUN rustup target add x86_64-unknown-linux-musl
## 使用依赖缓存
RUN cargo install sccache && \
    ln -sf /usr/local/llvm-clang/bin/clang /usr/bin/clang && \
    ln -sf /usr/local/llvm-clang/bin/llc /usr/bin/llc && \
    ln -sf /usr/local/llvm-clang/bin/llvm-strip /usr/bin/llvm-strip && \
    ln -sf /usr/local/llvm-clang/bin/llvm-objdump /usr/bin/llvm-objdump
CMD bash

# 编译说明
# 也可直接在从本地 docker 启动该编译环境，将代码挂载/下载进容器即可
# cargo build 不加参数编译出来的是 debug 版的可执行文件，
# 如果想要编译release版的可执行文件，请执行以下操作
# RUN cargo build --release