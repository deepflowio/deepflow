diff a/agent/src/trident.rs b/agent/src/trident.rs	(rejected hunks)
@@ -1103,6 +1103,8 @@ fn component_on_config_change(
                     libvirt_xml_extractor.clone(),
                     #[cfg(target_os = "linux")]
                     None,
+                    #[cfg(target_os = "linux")]
+                    false,
                 ) {
                     Ok(mut d) => {
                         d.start();
@@ -1118,8 +1120,13 @@ fn component_on_config_change(
         }
         PacketCaptureType::Mirror | PacketCaptureType::Analyzer => {
             for d in components.dispatcher_components.iter() {
+                let links = get_listener_links(
+                    conf,
+                    #[cfg(target_os = "linux")]
+                    &netns::NsFile::Root,
+                );
                 d.dispatcher_listener.on_tap_interface_change(
-                    &vec![],
+                    &links,
                     conf.if_mac_source,
                     conf.agent_type,
                     &blacklist,
@@ -1213,6 +1220,8 @@ fn component_on_config_change(
                     libvirt_xml_extractor.clone(),
                     #[cfg(target_os = "linux")]
                     None,
+                    #[cfg(target_os = "linux")]
+                    false,
                 ) {
                     Ok(mut d) => {
                         d.start();
@@ -1936,9 +1945,7 @@ impl AgentComponents {
         }
 
         #[cfg(target_os = "linux")]
-        let local_dispatcher_count = if candidate_config.capture_mode == PacketCaptureType::Local
-            && candidate_config.dispatcher.extra_netns_regex == ""
-        {
+        let mut packet_fanout_count = if candidate_config.dispatcher.extra_netns_regex == "" {
             user_config
                 .inputs
                 .cbpf
@@ -1949,7 +1956,7 @@ impl AgentComponents {
             1
         };
         #[cfg(any(target_os = "windows", target_os = "android"))]
-        let local_dispatcher_count = 1;
+        let packet_fanout_count = 1;
 
         let links = get_listener_links(
             &candidate_config.dispatcher,
@@ -1957,24 +1964,25 @@ impl AgentComponents {
             &netns::NsFile::Root,
         );
         if interfaces_and_ns.is_empty() && !links.is_empty() {
-            if candidate_config.capture_mode != PacketCaptureType::Local {
-                for l in links {
+            if packet_fanout_count > 1 || candidate_config.capture_mode == PacketCaptureType::Local
+            {
+                for _ in 0..packet_fanout_count {
                     #[cfg(target_os = "linux")]
-                    interfaces_and_ns.push((vec![l], netns::NsFile::Root));
+                    interfaces_and_ns.push((links.clone(), netns::NsFile::Root));
                     #[cfg(any(target_os = "windows", target_os = "android"))]
-                    interfaces_and_ns.push(vec![l]);
+                    interfaces_and_ns.push(links.clone());
                 }
             } else {
-                for _ in 0..local_dispatcher_count {
+                for l in links {
                     #[cfg(target_os = "linux")]
-                    interfaces_and_ns.push((links.clone(), netns::NsFile::Root));
+                    interfaces_and_ns.push((vec![l], netns::NsFile::Root));
                     #[cfg(any(target_os = "windows", target_os = "android"))]
-                    interfaces_and_ns.push(links.clone());
+                    interfaces_and_ns.push(vec![l]);
                 }
             }
         }
         #[cfg(target_os = "linux")]
-        if candidate_config.capture_mode == PacketCaptureType::Mirror
+        if candidate_config.capture_mode != PacketCaptureType::Local
             && (!user_config
                 .inputs
                 .cbpf
@@ -1984,6 +1992,7 @@ impl AgentComponents {
                 .is_empty()
                 || candidate_config.dispatcher.dpdk_source != DpdkSource::None)
         {
+            packet_fanout_count = 1;
             interfaces_and_ns = vec![(vec![], netns::NsFile::Root)];
         }
 
@@ -2386,6 +2395,10 @@ impl AgentComponents {
                 libvirt_xml_extractor.clone(),
                 #[cfg(target_os = "linux")]
                 dpdk_ebpf_receiver.take(),
+                #[cfg(target_os = "linux")]
+                {
+                    packet_fanout_count > 1
+                },
             )?;
             dispatcher_components.push(dispatcher_component);
         }
@@ -3174,6 +3187,7 @@ fn build_dispatchers(
     #[cfg(target_os = "linux")] kubernetes_poller: Arc<GenericPoller>,
     #[cfg(target_os = "linux")] libvirt_xml_extractor: Arc<LibvirtXmlExtractor>,
     #[cfg(target_os = "linux")] dpdk_ebpf_receiver: Option<Receiver<Box<packet::Packet<'static>>>>,
+    #[cfg(target_os = "linux")] fanout_enabled: bool,
 ) -> Result<DispatcherComponent> {
     let candidate_config = &config_handler.candidate_config;
     let user_config = &candidate_config.user_config;
@@ -3290,7 +3304,7 @@ fn build_dispatchers(
         )),
     ]));
 
-    let pcap_interfaces = if candidate_config.capture_mode == PacketCaptureType::Mirror
+    let pcap_interfaces = if candidate_config.capture_mode != PacketCaptureType::Local
         && candidate_config
             .user_config
             .inputs
@@ -3343,6 +3357,8 @@ fn build_dispatchers(
             cpu_set: dispatcher_config.cpu_set,
             #[cfg(target_os = "linux")]
             dpdk_ebpf_receiver,
+            #[cfg(target_os = "linux")]
+            fanout_enabled,
             ..Default::default()
         })))
         .bpf_options(bpf_options)
@@ -3375,13 +3391,11 @@ fn build_dispatchers(
         .policy_getter(policy_getter)
         .exception_handler(exception_handler.clone())
         .ntp_diff(synchronizer.ntp_diff())
-        .src_interface(
-            if candidate_config.capture_mode != PacketCaptureType::Local {
-                src_link.name.clone()
-            } else {
-                "".into()
-            },
-        )
+        .src_interface(if cfg!(target_os = "linux") && !fanout_enabled {
+            src_link.name.clone()
+        } else {
+            "".into()
+        })
         .agent_type(dispatcher_config.agent_type)
         .queue_debugger(queue_debugger.clone())
         .analyzer_queue_size(user_config.inputs.cbpf.tunning.raw_packet_queue_size)
