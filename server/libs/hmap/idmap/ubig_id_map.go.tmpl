package idmap

import (
	"bytes"
	"fmt"
	"sync"
	"sync/atomic"

	"github.com/deepflowio/deepflow/server/libs/stats"
	"github.com/deepflowio/deepflow/server/libs/utils"
	"github.com/deepflowio/deepflow/server/libs/hmap"
	"github.com/deepflowio/deepflow/server/libs/hmap/keyhash"
)

{{ range . }}

const (
	_U{{.}}_KEY_SIZE = {{.}} / 8
)

type u{{.}}IDMapNode struct {
	key   [_U{{.}}_KEY_SIZE]byte
	hash  uint32 // key的hash值
	value uint32

	next int32 // 表示节点所在冲突链的下一个节点的 buffer 数组下标
	slot int32 // 记录 node 对应的哈希 slot ，为了避免 Clear 函数遍历整个 slotHead 数组
}

func (n *u{{.}}IDMapNode) equal(hash uint32, key []byte) bool {
	return n.hash == hash && bytes.Compare(n.key[:], key) == 0
}

var blankU{{.}}MapNodeForInit u{{.}}IDMapNode

type u{{.}}IDMapNodeBlock []u{{.}}IDMapNode

var u{{.}}IDMapNodeBlockPool = sync.Pool{New: func() interface{} {
	return u{{.}}IDMapNodeBlock(make([]u{{.}}IDMapNode, _BLOCK_SIZE))
}}

// 注意：不是线程安全的
type U{{.}}IDMap struct {
	utils.Closable

	id string

	buffer []u{{.}}IDMapNodeBlock // 存储Map节点，以矩阵的方式组织，提升内存申请释放效率

	slotHead []int32 // 哈希桶，slotHead[i] 表示哈希值为 i 的冲突链的第一个节点为 buffer[[ slotHead[i] ]]
	size     int     // buffer中存储的有效节点总数
	width    int     // 哈希桶中最大冲突链长度

	hashSlotBits uint32 // 哈希桶数量总是2^N，记录末尾0比特的数量用于compressHash

	counter *Counter

	collisionChainDebugThreshold uint32 // scan宽度超过该值时保留冲突链信息，为0时不保存
	debugChain                   atomic.Value // 冲突链，类型为[]byte
	debugChainRead               uint32       // 冲突链是否已读，如果已读替换为新的 (atomic.Value无法清空)
}

func NewU{{.}}IDMap(module string, hashSlots uint32, opts ...stats.OptionStatTags) *U{{.}}IDMap {
	m := NewU{{.}}IDMapNoStats(module, hashSlots)

	statOptions := []stats.Option{stats.OptionStatTags{"module": module}}
	for _, opt := range opts {
		statOptions = append(statOptions, opt)
	}
	stats.RegisterCountable("idmap", m, statOptions...)
	hmap.RegisterForDebug(m)
	return m
}

func NewU{{.}}IDMapNoStats(module string, hashSlots uint32) *U{{.}}IDMap {
	if hashSlots >= 1<<30 {
		panic("hashSlots is too large")
	}

	i := uint32(1)
	for ; 1<<i < hashSlots; i++ {
	}
	hashSlots = 1 << i

	m := &U{{.}}IDMap{
		buffer:       make([]u{{.}}IDMapNodeBlock, 0),
		slotHead:     make([]int32, hashSlots),
		hashSlotBits: i,
		counter:      &Counter{},
		id:           "idmap{{.}}-" + module,
	}

	for i := uint32(0); i < hashSlots; i++ {
		m.slotHead[i] = -1
	}
	return m
}

func (m *U{{.}}IDMap) ID() string {
	return m.id
}

func (m *U{{.}}IDMap) KeySize() int {
	return _U{{.}}_KEY_SIZE
}

func (m *U{{.}}IDMap) Close() error {
	hmap.DeregisterForDebug(m)
	return m.Closable.Close()
}

func (m *U{{.}}IDMap) NoStats() *U{{.}}IDMap {
	m.Close()
	return m
}

func (m *U{{.}}IDMap) Size() int {
	return m.size
}

func (m *U{{.}}IDMap) Width() int {
	return m.width
}

func (m *U{{.}}IDMap) compressHash(hash uint32) int32 {
	return keyhash.Jenkins32(hash) & int32(len(m.slotHead)-1)
}

func (m *U{{.}}IDMap) find(key []byte, hash uint32, isAdd bool) *u{{.}}IDMapNode {
	slot := m.compressHash(hash)
	head := m.slotHead[slot]

	m.counter.scanTimes++
	width := 0
	next := head
	for next != -1 {
		width++
		node := &m.buffer[next>>_BLOCK_SIZE_BITS][next&_BLOCK_SIZE_MASK]
		if node.equal(hash, key) {
			m.counter.totalScan += width
			if m.counter.Max < width {
				m.counter.Max = width
			}
			if atomic.LoadUint32(&m.debugChainRead) == 1 {
				// 已读，构造新的chain
				if threshold := int(atomic.LoadUint32(&m.collisionChainDebugThreshold)); threshold > 0 && width >= threshold {
					chain := make([]byte, m.KeySize()*width)
					m.generateCollisionChainIn(chain, slot)
					m.debugChain.Store(chain)
					atomic.StoreUint32(&m.debugChainRead, 0)
				}
			}
			return node
		}
		next = node.next
	}
	m.counter.totalScan += width
	if isAdd {
		width++
	}
	if m.width < width {
		m.width = width
	}
	if m.counter.Max < width {
		m.counter.Max = width
	}
	if atomic.LoadUint32(&m.debugChainRead) == 1 {
		// 已读，构造新的chain
		if threshold := int(atomic.LoadUint32(&m.collisionChainDebugThreshold)); threshold > 0 && width >= threshold {
			chain := make([]byte, m.KeySize()*width)
			offset := 0
			if isAdd {
				offset += copy(chain, key)
			}
			m.generateCollisionChainIn(chain[offset:], slot)
			m.debugChain.Store(chain)
			atomic.StoreUint32(&m.debugChainRead, 0)
		}
	}
	return nil
}

func (m *U{{.}}IDMap) generateCollisionChainIn(bs []byte, index int32) {
	nodeID := m.slotHead[index]
	offset := 0
	bsLen := len(bs)

	for nodeID != -1 && offset < bsLen {
		node := &m.buffer[nodeID>>_BLOCK_SIZE_BITS][nodeID&_BLOCK_SIZE_MASK]
		offset += copy(bs[offset:], node.key[:])
		nodeID = node.next
	}
}

func (m *U{{.}}IDMap) GetCollisionChain() []byte {
	if atomic.LoadUint32(&m.debugChainRead) == 1 {
		return nil
	}
	chain := m.debugChain.Load()
	atomic.StoreUint32(&m.debugChainRead, 1)
	if chain == nil {
		return nil
	}
	return chain.([]byte)
}

func (m *U{{.}}IDMap) SetCollisionChainDebugThreshold(t int) {
	atomic.StoreUint32(&m.collisionChainDebugThreshold, uint32(t))
	// 标记为已读，刷新链
	if t > 0 {
		atomic.StoreUint32(&m.debugChainRead, 1)
	}
}

// 第一个返回值表示value，第二个返回值表示是否进行了Add。若key已存在，指定overwrite=true可覆写value。
func (m *U{{.}}IDMap) AddOrGet(key []byte, hash, value uint32, overwrite bool) (uint32, bool) {
	node := m.find(key, hash, true)
	if node != nil {
		if overwrite {
			node.value = value
		}
		return node.value, false
	}

	slot := m.compressHash(hash)
	head := m.slotHead[slot]

	if m.size >= len(m.buffer)<<_BLOCK_SIZE_BITS { // expand
		m.buffer = append(m.buffer, u{{.}}IDMapNodeBlockPool.Get().(u{{.}}IDMapNodeBlock))
	}
	node = &m.buffer[m.size>>_BLOCK_SIZE_BITS][m.size&_BLOCK_SIZE_MASK]
	copy(node.key[:], key)
        node.hash = hash
	node.value = value
	node.next = head
	node.slot = int32(slot)

	m.slotHead[slot] = int32(m.size)
	m.size++

	if m.counter.Size < m.size {
		m.counter.Size = m.size
	}

	return value, true
}

// 第一个返回值表示value，第二个返回值表示是否进行了Add。若key已存在，指定overwrite=true可覆写value。
func (m *U{{.}}IDMap) AddOrGetWithSlice(key []byte, hash uint32, value uint32, overwrite bool) (uint32, bool) {
	if len(key) != _U{{.}}_KEY_SIZE {
		panic(fmt.Sprintf("传入key的长度不等于 %d 字节", _U{{.}}_KEY_SIZE))
	}
	return m.AddOrGet(key, hash, value, overwrite)
}

// compatible with old code
func (m *U{{.}}IDMap) Get(key []byte, hash uint32) (uint32, bool) {
	if node := m.find(key, hash, false); node != nil {
		return node.value, true
	}
	return 0, false
}

func (m *U{{.}}IDMap) GetWithSlice(key []byte, hash uint32) (uint32, bool) {
	if len(key) != _U{{.}}_KEY_SIZE {
		panic(fmt.Sprintf("传入key的长度不等于 %d 字节", _U{{.}}_KEY_SIZE))
	}
	return m.Get(key, hash)
}

func (m *U{{.}}IDMap) GetCounter() interface{} {
	var counter *Counter
	counter, m.counter = m.counter, &Counter{Size: m.size}
	if counter.scanTimes != 0 {
		counter.AvgScan = counter.totalScan / counter.scanTimes
	}
	return counter
}

func (m *U{{.}}IDMap) Clear() {
	for i := 0; i < m.size; i += _BLOCK_SIZE {
		for j := 0; j < _BLOCK_SIZE && i+j < m.size; j++ {
			node := &m.buffer[i>>_BLOCK_SIZE_BITS][j]
			m.slotHead[node.slot] = -1
			*node = blankU{{.}}MapNodeForInit
		}
		u{{.}}IDMapNodeBlockPool.Put(m.buffer[i>>_BLOCK_SIZE_BITS])
		m.buffer[i>>_BLOCK_SIZE_BITS] = nil
	}

	m.buffer = m.buffer[:0]

	m.size = 0
	m.width = 0

	atomic.StoreUint32(&m.debugChainRead, 1)
}

// check interface implemented
var _ UBigIDMap = &U{{.}}IDMap{}

{{ end }}
