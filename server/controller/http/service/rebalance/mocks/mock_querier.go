// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mysql "github.com/deepflowio/deepflow/server/controller/db/mysql"
	mysqlmodel "github.com/deepflowio/deepflow/server/controller/db/mysql/model"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// GetAgentDispatcher mocks base method.
func (m *MockQuerier) GetAgentDispatcher(db *mysql.DB, domainPrefix string, dataDuration int) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentDispatcher", db, domainPrefix, dataDuration)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentDispatcher indicates an expected call of GetAgentDispatcher.
func (mr *MockQuerierMockRecorder) GetAgentDispatcher(db, domainPrefix, dataDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentDispatcher", reflect.TypeOf((*MockQuerier)(nil).GetAgentDispatcher), db, domainPrefix, dataDuration)
}
