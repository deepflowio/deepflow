package aliyun

import (
	"errors"
	"time"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	cbn "github.com/aliyun/alibaba-cloud-sdk-go/services/cbn"
	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	cs "github.com/aliyun/alibaba-cloud-sdk-go/services/cs"
	r_kvstore "github.com/aliyun/alibaba-cloud-sdk-go/services/r-kvstore"
	rds "github.com/aliyun/alibaba-cloud-sdk-go/services/rds"
	slb "github.com/aliyun/alibaba-cloud-sdk-go/services/slb"
	vpc "github.com/aliyun/alibaba-cloud-sdk-go/services/vpc"
	simplejson "github.com/bitly/go-simplejson"
)

{{ range . }}

{{- $typed_name := print .type }}
{{- $service := print .service }}
{{- $func := print .func }}
{{- $request_type := print .request_type }}
{{- $result_key := print .result_key }}
{{- $call_num := print .call_num }}

func (a *Aliyun) get{{$typed_name}}Response(region string, request *{{$service}}.{{$request_type}}) ([]*simplejson.Json, error) {
	var resp []*simplejson.Json

	client, _ := {{$service}}.NewClientWithAccessKey(region, a.secretID, a.secretKey)

	request.SetConnectTimeout(time.Duration(a.httpTimeout) * time.Second)

{{- if eq .call_num "multi" }}
	pageNum := 1
	pageSize := 50
	totalCount := 0
{{- end }}
	for {
{{- if eq .call_num "multi" }}
		request.PageSize = requests.NewInteger(pageSize)
		request.PageNumber = requests.NewInteger(pageNum)
{{- end }}

		response, err := client.{{$func}}(request)
        if response.GetHttpStatus() == 403 || response.GetHttpStatus() == 400 {
			log.Info(err)
			break
		}
		if err != nil {
			return make([]*simplejson.Json, 0), err
		}

		if response.GetHttpStatus() != 200 {
			return make([]*simplejson.Json, 0), errors.New(response.GetHttpContentString())
		}

		result, err := simplejson.NewJson(response.GetHttpContentBytes())
		if err != nil {
			return make([]*simplejson.Json, 0), err
		}

		if curResp, ok := result.CheckGet("{{$result_key}}"); ok {
			resp = append(resp, curResp)
		} else {
			break
		}

{{- if eq .call_num "multi" }}
		pageNum += 1
		totalCount += pageSize
		if totalCount >= result.Get("TotalCount").MustInt() {
			break
		}
{{- else }}
		break
{{- end }}
	}
	a.debugger.WriteJson("{{$result_key}}", " ", resp)
	return resp, nil
}

{{ end }}
