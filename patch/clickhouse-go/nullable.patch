diff --git a/lib/data/block_write_column.go b/lib/data/block_write_column.go
index b769057..dbe6584 100644
--- a/lib/data/block_write_column.go
+++ b/lib/data/block_write_column.go
@@ -2,11 +2,12 @@ package data
 
 import (
 	"fmt"
-	"github.com/ClickHouse/clickhouse-go/lib/column"
 	"net"
 	"reflect"
 	"time"
 
+	"github.com/ClickHouse/clickhouse-go/lib/column"
+
 	"github.com/ClickHouse/clickhouse-go/lib/binary"
 )
 
@@ -48,7 +49,16 @@ func (block *Block) WriteInt8(c int, v int8) error {
 }
 
 func (block *Block) WriteInt8Nullable(c int, v *int8) error {
-	return block.buffers[c].Column.Int8Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Int8(0)
+	}
+
+	return block.buffers[c].Column.Int8(*v)
 }
 
 func (block *Block) WriteInt16(c int, v int16) error {
@@ -56,7 +66,16 @@ func (block *Block) WriteInt16(c int, v int16) error {
 }
 
 func (block *Block) WriteInt16Nullable(c int, v *int16) error {
-	return block.buffers[c].Column.Int16Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Int16(0)
+	}
+
+	return block.buffers[c].Column.Int16(*v)
 }
 
 func (block *Block) WriteInt32(c int, v int32) error {
@@ -64,7 +83,16 @@ func (block *Block) WriteInt32(c int, v int32) error {
 }
 
 func (block *Block) WriteInt32Nullable(c int, v *int32) error {
-	return block.buffers[c].Column.Int32Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Int32(0)
+	}
+
+	return block.buffers[c].Column.Int32(*v)
 }
 
 func (block *Block) WriteInt64(c int, v int64) error {
@@ -72,7 +100,16 @@ func (block *Block) WriteInt64(c int, v int64) error {
 }
 
 func (block *Block) WriteInt64Nullable(c int, v *int64) error {
-	return block.buffers[c].Column.Int64Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Int64(0)
+	}
+
+	return block.buffers[c].Column.Int64(*v)
 }
 
 func (block *Block) WriteUInt8(c int, v uint8) error {
@@ -80,7 +117,16 @@ func (block *Block) WriteUInt8(c int, v uint8) error {
 }
 
 func (block *Block) WriteUInt8Nullable(c int, v *uint8) error {
-	return block.buffers[c].Column.UInt8Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.UInt8(0)
+	}
+
+	return block.buffers[c].Column.UInt8(*v)
 }
 
 func (block *Block) WriteUInt16(c int, v uint16) error {
@@ -88,7 +134,20 @@ func (block *Block) WriteUInt16(c int, v uint16) error {
 }
 
 func (block *Block) WriteUInt16Nullable(c int, v *uint16) error {
-	return block.buffers[c].Column.UInt16Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.UInt16(0)
+	}
+
+	return block.buffers[c].Column.UInt16(*v)
+}
+
+func (block *Block) WriteUInt16NullableBit(c int, isNil bool) error {
+	return block.buffers[c].Column.Nullable(isNil)
 }
 
 func (block *Block) WriteUInt32(c int, v uint32) error {
@@ -96,7 +155,16 @@ func (block *Block) WriteUInt32(c int, v uint32) error {
 }
 
 func (block *Block) WriteUInt32Nullable(c int, v *uint32) error {
-	return block.buffers[c].Column.UInt32Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.UInt32(0)
+	}
+
+	return block.buffers[c].Column.UInt32(*v)
 }
 
 func (block *Block) WriteUInt64(c int, v uint64) error {
@@ -104,7 +172,16 @@ func (block *Block) WriteUInt64(c int, v uint64) error {
 }
 
 func (block *Block) WriteUInt64Nullable(c int, v *uint64) error {
-	return block.buffers[c].Column.UInt64Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.UInt64(0)
+	}
+
+	return block.buffers[c].Column.UInt64(*v)
 }
 
 func (block *Block) WriteFloat32(c int, v float32) error {
@@ -112,7 +189,16 @@ func (block *Block) WriteFloat32(c int, v float32) error {
 }
 
 func (block *Block) WriteFloat32Nullable(c int, v *float32) error {
-	return block.buffers[c].Column.Float32Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Float32(0)
+	}
+
+	return block.buffers[c].Column.Float32(*v)
 }
 
 func (block *Block) WriteFloat64(c int, v float64) error {
@@ -120,7 +206,16 @@ func (block *Block) WriteFloat64(c int, v float64) error {
 }
 
 func (block *Block) WriteFloat64Nullable(c int, v *float64) error {
-	return block.buffers[c].Column.Float64Nullable(v)
+	isNil := v == nil
+	if err := block.buffers[c].Offset.Nullable(!isNil); err != nil {
+		return err
+	}
+
+	if isNil {
+		return block.buffers[c].Column.Float64(0)
+	}
+
+	return block.buffers[c].Column.Float64(*v)
 }
 
 func (block *Block) WriteBytes(c int, v []byte) error {
